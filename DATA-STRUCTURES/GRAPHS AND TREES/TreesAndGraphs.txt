GRAPH
================
A graph is a collection of linked Nodes. Unlike a linkedList, a Graph is literally a linked list 
that is not linear but can have multiple branches. Graph is used in many scenarios in
real life. E,g Graphs are used to hold data about a social network for example where
Every node holds details of a person but also hold pointers to other person nodes
they know.

Node / Vertex:
================
A node is an abstract data type which holds two things.
1: The data of the Node which can be of a given type; integer, string etc
2: Pointers to other Nodes.

Edge:
=================
When a node holds a pointer to another node they are said to have an edge between them
i,e a path between the two nodes. An edge between two nodes can either be directed or undirected. 

Directed vs Undirected Graph:
==============================
In a directed graph, each edge has only one direction while in an undirected 
graph, each edge has direction both ways hence not directed
A --> B directed  unidirectional, this is represented  as array of two items [A,B]
In directed graph representation [A,B] is not thesame as [B,A]

A<-->B  undirected  bidirectional
If the problem states that the graph is undirected, you will need to set both directions when building the 
graph, as the input will usually not duplicate edges i.e it won't have [2, 0] and [0, 2] for example).

Representing a Graph in code;
=============================
Graphs can be presented in three formats
1	Adjency List
2	Array of Edges
3	Adjaceny Matrix 

Adjency Matrix:
===============
Adjancy Matrix present a graph in a "2D" array A[i,j] formate, where i is a
Node in the graph and j is its possible neightbour. Essentially a "2D" representation of 
a matrix is an array of all possible permutions of two items taken from the nodes. So if 
we have a graph of three nodes A, B , C then the permutationa will as follows
AB, BA, AC, CA, BC, CB. We present these Node using integers like so
A = 0, B = 1, C = 2. 
We then represent the matrix like so;

A[0,0] = 0; Indicating A is not a neighbour to itself
A[0,1] = 1  Indicating A and B are neighbours, they have an edge between them

This can be visualised like so;

     0  1  2 
 --|---------
 0 | 0  1  1
 1 | 1  0  0
 2 | 0  1  0

This matrix will be interpreted as followings

A[0,0] = 0
A[0,1] = 1
A[0,2] = 0 First row shows directed edges from node 0 to others i.e [0,0] [0,1] [0,2]

A[1,0] = 1
A[1,1] = 0
A[1,2] = 1 Second row shows directed edges from node 1 to others

A[2,0] = 1
A[2,1] = 0
A[2,2] = 0  Second row shows directed edges from node 2 to others



Adjaceny List:
===============
Adjaceny List is simply a Jagged array. i,e an array of arrays int[][]
The array at index 0 is an array that holds all neighbours of Node 0
The array at index 0 is an array of all neighbours of Node 1

So the Adjaceny matrix reprented above can be represented here like so;

A[0]= new int []{1}      Node 0 has directed edge to only node 1
A[1]= new int []{0, 2}   Node 1 has directed edges to node 0 and node 2
A[2]= new int []{0 }     Node 2 has directed edges to only node 0

This option only shows a list of neightbours unlike the Adjaceny matrix where
every possible permutation is defined and 1 or 0 is used to indicate if each 
permutation are neighbours. 





Array Of Edges:
================
This is the simpliest one. Its presents an array of all edeges in the graph
Each edge is a pair of two numbers, the one on the left having a pointer 
to the one on the right. ie [  [1,2], [2,3] , [3,1]    ]

Unlike Adjacent Matrix and Adjacent List, Edges Array can be represned by a "2D" Array Arr[i, j]
where i = is a row represent a  Node and 
J = is a column represent a neightboruing node in the matrix
The next format is an adjacency matrix. Once again, the nodes will be numbered from 0 to n - 1.
You will be given a 2D matrix of size n x n, let's call it graph. If graph[i][j] == 1, that means there
is an outgoing edge from node i to node j. For example:

 0  1  1  0
 0  0  0  1
 0  1  1  0
 1  0  0  1
 
 In the example above, each row represents a different Node in the graph

 Indegree;
=============
A node can have any number of edges entring it and can also have any number of 
edges leaving the node. The number of edges entring a node is called the Node's 
indegree

OutDegree:
==============
The number of edges that leave a node is called outdegree
A directed graph is one which 


Cyclic Graph:
===============
This is a graph that has a cycle. i,e a Graph with no end because the last node 
added to the graph points to a previous node as its next

Acyclic Graph:
===============
This is a graph that does not have a cycle

Neightbour:
==============
Two nodes are said to be neighbours when they are connected by
a single edge. 




